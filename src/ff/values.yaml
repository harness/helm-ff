global:
  loadbalancerURL: "test@harness.io"
  airgap: false
  ha: false
  opa:
    enabled: false
  # Enable if using ingress objects
  ingress:
    enabled: false
    className: "nginx"
    hosts:
      - 'my-host.example.org'
    tls:
      enabled: false
      secretName: harness-ssl
  database:
    mongo:
      installed: true
    redis:
      installed: true
      protocol: "redis"
      # --  provide default values if redis.installed is set to false
      hosts:
        - redis:6379
      secretName: "redis-secret"
      userKey: "redis-user"
      passwordKey: "redis-password"
      extraArgs: ""

ff-pushpin-service:
  replicaCount: 1
  maxSurge: 1
  maxUnavailable: 0

  waitForInitContainer:
    image:
      registry: docker.io
      repository: harness/helm-init-container
      pullPolicy: IfNotPresent
      tag: "latest"
      digest: ""

  pushpin:
    image:
      registry: docker.io
      repository: harness/ff-pushpin-signed
      pullPolicy: IfNotPresent
      # Overrides the image tag whose default is the chart appVersion.
      tag: "1.0.11"
      digest: ""
    resources:
      limits:
        cpu: 1
        memory: 2048Mi
      requests:
        cpu: 1
        memory: 2048Mi

  pushpinworker:
    image:
      registry: docker.io
      repository: harness/ff-pushpin-worker-signed
      pullPolicy: IfNotPresent
      # Overrides the image tag whose default is the chart appVersion.
      tag: "1.1075.0"
      digest: ""
    securityContext:
      runAsUser: 65534
      runAsNonRoot: true
    resources:
      limits:
        cpu: 1
        memory: 2048Mi
      requests:
        cpu: 1
        memory: 2048Mi

  configmap: {}

  memory: 4096

  appLogLevel: INFO

  nameOverride: ""
  fullnameOverride: ""

  serviceAccount:
    # Specifies whether a service account should be created
    create: false
    # Annotations to add to the service account
    annotations: {}
    # The name of the service account to use.
    # If not set and create is true, a name is generated using the fullname template
    name: "harness-default"

  podAnnotations: {}

  podSecurityContext: {}
    # fsGroup: 2000

  service:
    type: ClusterIP
    port17001: 17001
    targetport17001: 7999
    port17002: 17002
    targetport17002: 443
    port17003: 17003
    targetport17003: 5561

  autoscaling:
    enabled: false
    minReplicas: 1
    maxReplicas: 100
    targetCPU: ""
    targetMemory: ""

  nodeSelector: {}

  tolerations: []

  affinity: {}

ff-service:
  replicaCount: 1
  maxSurge: 1
  maxUnavailable: 0

  waitForInitContainer:
    image:
      registry: docker.io
      repository: harness/helm-init-container
      pullPolicy: IfNotPresent
      tag: "latest"
      digest: ""

  image:
    registry: docker.io
    repository: harness/ff-server-signed
    pullPolicy: IfNotPresent
    # Overrides the image tag whose default is the chart appVersion.
    tag: "1.1075.0"
    digest: ""

  jobs:
    postgres_migration:
      image:
        registry: docker.io
        tag: "1.1075.0"
        repository: harness/ff-postgres-migration-signed
        pullPolicy: Always
        digest: ""
    timescaledb_migrate:
      image:
        registry: docker.io
        tag: "1.1075.0"
        repository: harness/ff-timescale-migration-signed
        pullPolicy: Always
        digest: ""

  configmap: {}

  timescaleSecret:
    password:
      name: harness-secrets
      key: timescaledbPostgresPassword

  memory: 4096

  appLogLevel: INFO

  nameOverride: ""
  fullnameOverride: ""

  serviceAccount:
    # Specifies whether a service account should be created
    create: false
    # Annotations to add to the service account
    annotations: {}
    # The name of the service account to use.
    # If not set and create is true, a name is generated using the fullname template
    name: "harness-default"

  podAnnotations: {}

  podSecurityContext: {}
    # fsGroup: 2000

  securityContext:
    runAsUser: 65534
    runAsNonRoot: true
    # capabilities:
    #   drop:
    #   - ALL
    # readOnlyRootFilesystem: true
    # runAsNonRoot: true
    # runAsUser: 1000

  service:
    type: ClusterIP
    port: 16001
    targetport: 3000
    grpcport: 16002
    targetgrpcport: 3001

  resources:
    limits:
      cpu: 1
      memory: 2048Mi
    requests:
      cpu: 1
      memory: 2048Mi

  autoscaling:
    enabled: false
    minReplicas: 1
    maxReplicas: 100
    targetCPU: ""
    targetMemory: ""

  nodeSelector: {}

  tolerations: []

  affinity: {}