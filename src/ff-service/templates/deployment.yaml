apiVersion: apps/v1
kind: Deployment
metadata:
  name: ff-service
  namespace: {{ .Release.Namespace }}
  labels:
    app: ff-service
    {{- include "ff-service.labels" . | nindent 4 }}
spec:
  progressDeadlineSeconds: 600
  {{- if not .Values.autoscaling.enabled }}
  replicas: {{ .Values.replicaCount }}
  {{- end }}
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: {{ .Values.maxSurge }}
      maxUnavailable: {{ .Values.maxUnavailable }}
  selector:
    matchLabels:
      app: ff-service
      {{- include "ff-service.selectorLabels" . | nindent 6 }}
  template:
    metadata:
      annotations:
        checksum/config: {{ include (print $.Template.BasePath "/config.yaml") . | sha256sum }}
        {{- with .Values.podAnnotations }}
        {{- toYaml . | nindent 8 }}
        {{- end }}
      labels:
        app: ff-service
        {{- include "ff-service.selectorLabels" . | nindent 8 }}
    spec:
      {{ include "ff-service.pullSecrets" . | nindent 6 }}
      serviceAccountName: {{ include "ff-service.serviceAccountName" . }}
      securityContext:
        {{- toYaml .Values.podSecurityContext | nindent 8 }}
      terminationGracePeriodSeconds: 30
      initContainers:
      {{- if .Values.global.database.mongo.installed }}
      - name: wait-for-mongo
        image: {{ include "common.images.image" (dict "imageRoot" .Values.waitForInitContainer.image "global" .Values.global) }}
        imagePullPolicy: IfNotPresent
        args:
          - "pod"
          - "-lapp=mongodb-replicaset"
      {{- end }}
      {{- if .Values.global.database.timescaledb.installed }}
      - name: wait-for-timescale
        image: {{ include "common.images.image" (dict "imageRoot" .Values.waitForInitContainer.image "global" .Values.global) }}
        imagePullPolicy: IfNotPresent
        args:
          - "pod"
          - "-lapp=timescaledb-single-chart"
      {{- end }}
      {{- if .Values.global.database.redis.installed }}
      - name: wait-for-redis
        image: {{ include "common.images.image" (dict "imageRoot" .Values.waitForInitContainer.image "global" .Values.global) }}
        imagePullPolicy: IfNotPresent
        args:
          - "pod"
          - "-lapp=redis-sentinel"
      {{- end }}
      - name: wait-for-ng-manager
        image: {{ include "common.images.image" (dict "imageRoot" .Values.waitForInitContainer.image "global" .Values.global) }}
        imagePullPolicy: IfNotPresent
        args:
          - "pod"
          - "-lapp=ng-manager"
      containers:
        - name: ff-service
          image: {{ include "common.images.image" (dict "imageRoot" .Values.image "global" .Values.global) }}
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          securityContext:
              {{- toYaml .Values.securityContext | nindent 12 }}
          ports:
          - name: http-ff-service
            containerPort: {{.Values.service.port}}
            protocol: "TCP"
          - name: grpc-gitsync
            containerPort: {{.Values.service.grpcport}}
            protocol: "TCP"
          {{- if .Values.lifecycleHooks }}
          lifecycle: {{- include "harnesscommon.tplvalues.render" (dict "value" .Values.lifecycleHooks "context" $) | nindent 12 }}
          {{- end }}
          {{- if .Values.extraVolumeMounts }}
          volumeMounts:
          {{- include "harnesscommon.tplvalues.render" (dict "value" .Values.extraVolumeMounts "context" $) | nindent 12 }}
          {{- end }}
          resources:
              {{- toYaml .Values.resources | nindent 12 }}
          env:
            {{- include "harnesscommon.dbconnection.timescaleSslEnv" (dict "enableSslVariableName" "SSL_MODE" "sslModeValue" "require" "context" $ ) | nindent 12 }}
            {{- include "harnesscommon.dbconnection.timescaleSslEnv" (dict "enableSslVariableName" "ANALYTICS_SSL_MODE" "sslModeValue" "require" "context" $ ) | nindent 12 }}
            {{- include "harnesscommon.dbconnection.timescaleEnv" (dict "passwordVariableName" "ANALYTICS_DB_PASS" "userVariableName" "ANALYTICS_DB_USER" "context" $) | indent 12}}
            {{- include "harnesscommon.dbconnection.timescaleEnv" (dict "passwordVariableName" "DB_PASS" "userVariableName" "DB_USER" "context" $) | indent 12}}
            {{- include "harnesscommon.dbconnection.redisEnv" (dict "context" .Values.global.database.redis "userVariableName" "EVENTS_FRAMEWORK_REDIS_USERNAME" "passwordVariableName" "EVENTS_FRAMEWORK_REDIS_PASSWORD") | indent 12 }}
            {{- include "harnesscommon.dbconnection.redisEnv" (dict "context" .Values.global.database.redis "userVariableName" "CF_REDIS_USERNAME" "passwordVariableName" "CF_REDIS_PASSWORD") | indent 12 }}
          envFrom:
          - configMapRef:
              name: ff-service
          readinessProbe:
            httpGet:
              path: /api/1.0/health
              port: 3000
            initialDelaySeconds: 60
            timeoutSeconds: 5
            periodSeconds: 5
            failureThreshold: 8
          livenessProbe:
            httpGet:
              path: /api/1.0/version
              port: 3000
            initialDelaySeconds: 40
            timeoutSeconds: 5
            periodSeconds: 10
            failureThreshold: 20
      {{ if or .Values.global.ha .Values.affinity }}
      affinity:
        podAntiAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
          - labelSelector:
              matchExpressions:
              - key: app
                operator: In
                values:
                - ff-service
            topologyKey: "kubernetes.io/hostname"
      {{- with .Values.affinity }}
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{ end }}
      {{- with .Values.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- if .Values.extraVolumes }}
      volumes:
      {{- include "harnesscommon.tplvalues.render" ( dict "value" .Values.extraVolumes "context" $ ) | nindent 8 }}
      {{- end }}
